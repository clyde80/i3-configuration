#!/bin/bash
#
# DESCRIPTION:
#
#   Split an audio file into multiple files.
#
# DEPENDENCIES:
#
#   ffmpeg, GNU Date
#
# Author: clyde80
# Website: https://github.com/clyde80/i3-configuration
# Created on: January 31, 2017
# Updated on: February 22, 2017
#
# To file a bug report, create an issue on GitHub:
# https://github.com/clyde80/i3-configuration/issues
#
# To submit a bug fix, create a pull request on the working branch:
# https://github.com/clyde80/i3-configuration/tree/working

#USAGE MESSAGE
readonly USAGE="Usage: $(basename "$0") [-h] file [-s] [-l] [-t time] time1 time#

DESCRIPTION

    Split an audio file into multiple files.

OPTIONS

    -h          Display this help message.
    -s          Split based on start times.
    -l          Split based on audio clip lengths.
    -t time     Where the first audio clip starts (time) (used with -l if the 
                first audio clip does not start at 00:00:00).
                
    file        The file to split.
    time#       The start time or length of each audio clip.

    All times need to be formatted as ##:## (MM:SS) or ##:##:## (HH:MM:SS).

EXAMPLES

    MusicFile.mp3 is a 1 minute long mp3 file.

    Split MusicFile.mp3 into separate files based on start times:

    $(basename "$0") MusicFile.mp3 -s 00:09 00:23 00:45

    Split MusicFile.mp3 into separate files using audio clip lengths:

    $(basename "$0") MusicFile.mp3 -l -t 00:09 00:14 00:22 00:15

    The two commands above do the same thing, they create three audio files. 
    The first file has a length of 14 seconds, second is 22 seconds, and the 
    third is 15 seconds.

Author: clyde80
Website: https://github.com/clyde80/i3-configuration
Created on: January 31, 2017
Updated on: February 17, 2017

To file a bug report, create an issue on GitHub:
https://github.com/clyde80/i3-configuration/issues

To submit a bug fix, create a pull request on the working branch:
https://github.com/clyde80/i3-configuration/tree/working"

# EXECUTABLE CODE Check if the user provided anything.
if [[ $# -eq 0 || $1 = "-h" ]]; then
    echo "$USAGE"
    exit 0
fi

# CONSTANTS
IFS=$'\n' # Handle file names with spaces.
readonly FILENAME=$1
readonly EXTENSION=${FILENAME##*.}
readonly MM_SS="^[0-9]{2}:[0-9]{2}$"
readonly HH_MM_SS="^[0-9]{2}:[0-9]{2}:[0-9]{2}$"
readonly TIME_FORMAT_ERROR="The times are not formatted correctly"
readonly TIME_ORDER_ERROR="The times are not in chronological order"
readonly NOT_A_FILE_ERROR="File does not exist: $FILENAME"
readonly INVALID_FILE_TYPE_ERROR="Can't determine type of file: $FILENAME"
readonly TIME_FORMAT_ERROR_CODE=2
readonly TIME_ORDER_ERROR_CODE=3
readonly NOT_A_FILE_ERROR_CODE=4
readonly INVALID_FILE_TYPE_ERROR_CODE=5

# Print green text.
print_green() {
    echo -e "\e[32m$1\e[39m"
}


# Print red text.
print_red() {
    echo -e "\e[31m$1\e[39m"
}

################################################################################
# Ensure that every time provided is formatted as HH:MM:SS or MM:SS.
#
# Arguments:
#   $@ -- The times to check.
################################################################################
check_time_formats() {
    for t in $@; do
        if ! [[ "$t" =~ $MM_SS || "$t" =~ $HH_MM_SS ]]; then
            print_red "Error: $TIME_FORMAT_ERROR: $t"
            exit $TIME_FORMAT_ERROR_CODE
        fi
    done
}

################################################################################
# Convert the time from MM:SS format to HH:MM:SS format if needed.
#
# Arguments:
#   $1 -- The time to convert.
################################################################################
check_convert_to_hh_mm_ss() {
    if [[ "$1" =~ $MM_SS ]]; then
        echo "00:$1"
    else
        echo "$1"
    fi
}

################################################################################
# Ensure the times provided are in chronological order.
#
# Arguments:
#   $@ -- The times.
################################################################################
check_time_order() {
    while [[ $# -gt 1 ]]; do
        local start_time=$(check_convert_to_hh_mm_ss $1)
        local end_time=$(check_convert_to_hh_mm_ss $2)

        start_time=$(date -u -d "$start_time" +"%s")
        end_time=$(date -u -d "$end_time" +"%s")

        if [[ $end_time -lt $start_time ]]; then
            print_red "$TIME_ORDER_ERROR: $1,$2"
            exit $TIME_ORDER_ERROR_CODE
        fi

        shift
    done
}

################################################################################
# Calculate the difference between two start times to get an audio clip length, 
# then print the song length.
#
# Arguments:
#   $1 -- The start time of the first audio clip.
#   $2 -- The start time of the next audio clip.
################################################################################
calculate_length_st() {
    local start_time=$(check_convert_to_hh_mm_ss $1)
    local end_time=$(check_convert_to_hh_mm_ss $2)

    # Convert the start and end times to seconds.
    start_time=$(date -u -d "$start_time" +"%s")
    end_time=$(date -u -d "$end_time" +"%s")

    # Calculate the length.
    local length=0
    length=$(date -u -d "0 $end_time sec - $start_time sec" +"%H:%M:%S")

    echo $length
}

################################################################################
# Add an audio clip's length to it's start time to get the start time of the 
# next audio clip then print the next audio clip's start time.
#
# Arguments:
#   $1 -- The audio clip's start time.
#   $2 -- The audio clip's length.
################################################################################
calculate_end_time_lt() {
    local start_time=$(check_convert_to_hh_mm_ss $1)
    local length=$(check_convert_to_hh_mm_ss $2)

    # Convert start time and end time to seconds since epoch (01-01-1970)
    start_time=$(date -u -d "$start_time" +"%s")
    length=$(date -u -d "$length" +"%s")

    # Add them together and format it as HH:MM:SS
    local end_time=$(date -u -d "0 $start_time sec + $length sec" +"%H:%M:%S")

    echo $end_time
}

################################################################################
# Split the audio file into separate files using start times of each clip. Each
# resulting clip's length is the difference between it's start time and the
# next clip's start time.
#
# Arguments:
#   $@ -- Contains start times for each audio clip.
################################################################################
split_by_start_times() {
    local count=1

    echo "Checking time formats..."
    check_time_formats $@
    echo "Checking time order..."
    check_time_order $@
    print_green "Checks passed"

    while [[ $# -gt 1 ]]; do
        ffmpeg -i "$FILENAME" -ss $1 -t $(calculate_length_st $1 $2) \
            -acodec copy $count.$EXTENSION
        ((count++))
        shift
    done

    ffmpeg -i "$FILENAME" -ss $1 -acodec copy $count.$EXTENSION

    print_green "Finished"
}

################################################################################
# Split the audio file using the user provided audio clip lengths. When doing
# this, the user can provide their own start time (with the "-t" option) or use
# the default (00:00:00).
#
# Arguments:
#   $1 -- $1 can be the "-t" option or a user provided audio clip length.
#   $2 -- If $1 is "-t", then $2 is the user provided start time.
################################################################################
split_by_lengths() {
    local start_time="00:00:00" # Default start time.

    if [[ "$1" = -t ]]; then
        shift
        start_time=$(check_convert_to_hh_mm_ss $1)
        shift
    fi

    echo "Checking time formats..."
    check_time_formats $@
    print_green "Checks passed"

    local count=1
    while [[ $# -gt 0 ]]; do
        ffmpeg -i "$FILENAME" -ss $start_time \
            -t $(check_convert_to_hh_mm_ss $1) \
            -acodec copy $count.$EXTENSION
        start_time=$(calculate_end_time_lt $start_time $1)
        shift
        ((count++))
    done

    print_green "Finished"
}

# Main function
main() {

    # Make sure $FILENAME exists and $EXTENSION is not empty.
    if [[ ! -f "$FILENAME" ]]; then
        echo "$NOT_A_FILE_ERROR"
        exit $NOT_A_FILE_ERROR_CODE
    elif [[ -z "$EXTENSION" ]]; then
        echo "$INVALID_FILE_TYPE_ERROR"
        exit $INVALID_FILE_TYPE_ERROR_CODE
    fi

    shift # Get rid of the filename in the arguments array.

    case $1 in
        "-s") 
            shift # Get rid of the "-s"
            split_by_start_times $@
            ;;
        "-l")
            shift # Get rid of the "-l"
            split_by_lengths $@
            ;;
     esac
}

main $@
